#---------LIBARARIES---------------

import telebot
from telebot import types
import socket

#--------SOCKET SETTINGS------------
bot = telebot.TeleBot('6570224062:AAG43G3pLc3DnB3BFFbQC9_jCvKpywZ3BAs')

#DEVICE PARAMETRS (back part of the project that will use micropython to communicate with sensors, lamps and etc)



#---LED---
led_value = '' # on/off

#---TEMPERATURE MEASURING---
tempValues = ''
humidityValues = ''

#---LIGHT MEASURING----
lightMeasure = ''

#--- CODENAME "RADAR" -----
anyBodyThere = ''

@bot.message_handler(commands=['start'])


def start(message):
    Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

    led_button = types.InlineKeyboardButton("LED –ª–µ–Ω—Ç–∞", callback_data="LED –ª–µ–Ω—Ç–∞")
    tempMeasure = types.InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    lightMeasure = types.InlineKeyboardButton("–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å", callback_data="–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å")
    anyAround = types.InlineKeyboardButton("–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è", callback_data="–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
    humidityButton = types.InlineKeyboardButton("–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏",callback_data="–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    updateData = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",callback_data = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


    Inlinemarkup.add(led_button,tempMeasure)
    Inlinemarkup.add(lightMeasure,anyAround)
    Inlinemarkup.add(humidityButton)
    Inlinemarkup.add(updateData)
    bot.send_message(message.from_user.id, "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º")
    bot.send_message(message.from_user.id, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–Ω–∏–∑—É‚¨áÔ∏è")
    bot.send_message(message.from_user.id, "–£–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=Inlinemarkup)
 

def main_menu(reply):
    Inlinemarkup = types.InlineKeyboardMarkup(row_width=2)

    led_button = types.InlineKeyboardButton("LED –ª–µ–Ω—Ç–∞", callback_data="LED –ª–µ–Ω—Ç–∞")
    tempMeasure = types.InlineKeyboardButton("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    lightMeasure = types.InlineKeyboardButton("–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å", callback_data="–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å")
    anyAround = types.InlineKeyboardButton("–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è", callback_data="–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
    humidityButton = types.InlineKeyboardButton("–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏",callback_data="–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")

    KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    updateData = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",callback_data = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


    Inlinemarkup.add(led_button,tempMeasure)
    Inlinemarkup.add(lightMeasure,anyAround)
    Inlinemarkup.add(humidityButton)
    Inlinemarkup.add(updateData)
    
    bot.send_message(reply.from_user.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞:")
    bot.send_message(reply.from_user.id, "–£–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",reply_markup = Inlinemarkup)

@bot.message_handler(content_types=['text'])

def get_text_message(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ":
        main_menu(message)

@bot.callback_query_handler(func = lambda call: True)

def get_callback(call):

    global status
    global rawData
    global tempValues
    global led_value
    global lightMeasure
    global anyBodyThere
    global humidityValues
    try:
        if call.data == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            sock = 0
            try:
                led_value = ''
                tempValues = ''
                humidityValues = ''
                lightMeasure = ''
                anyBodyThere  = ''
                sock = socket.socket()
                sock.connect(('192.168.0.111', 3030))
                key = sock.send('1'.encode('utf-8'))
                data = sock.recv(1024) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–∫–µ—Ç–∞.
                rawData = data.decode('utf-8')
                sock.close()
                decoding_protocol()
                
                bot.send_message(call.message.chat.id, "–û–±–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–º–Ω–æ–≥–æ –¥–æ–º–∞")
                main_menu(call)
            except:
                bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–∞–±—É —É–º–Ω–æ–≥–æ –¥–æ–º–∞")
                sock.close()
                main_menu(call)
        if call.data == "LED –ª–µ–Ω—Ç–∞":
            if led_value == '1':
                status = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æüîÜ"
            else:
                status = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æüí§"

            Inlinemarkup = types.InlineKeyboardMarkup(row_width = 2) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            setOn = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å', callback_data='–í–∫–ª—é—á–∏—Ç—å')
            setOff = types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='–í—ã–∫–ª—é—á–∏—Ç—å')
            KeyboardMarkup = types.ReplyKeyboardMarkup(resize_keyboard= True)
            backMenu1 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
            Inlinemarkup.add(setOn, setOff)
            KeyboardMarkup.add(backMenu1)
            bot.send_message(call.message.chat.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: LED –ª–µ–Ω—Ç–∞")
            bot.send_message(call.message.chat.id, status, reply_markup = Inlinemarkup)
            bot.send_message(call.message.chat.id, "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = KeyboardMarkup)

        if call.data == "–í–∫–ª—é—á–∏—Ç—å":
            if led_value == '1' or led_value == '2':
                bot.send_message(call.message.chat.id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ")
            elif led_value == '0':
                sock = socket.socket()
                sock.connect(('192.168.0.111', 3030))
                key = sock.send('2'.encode('utf-8'))
                sock.close()
                bot.send_message(call.message.chat.id,"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æ")
        if call.data == "–í—ã–∫–ª—é—á–∏—Ç—å":
            if led_value != 0:
                sock = socket.socket()
                sock.connect(('192.168.0.111', 3030))
                key = sock.send('3'.encode('utf-8'))
                sock.close()
                bot.send_message(call.message.chat.id,"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–∫–ª—é—á–µ–Ω–æ")
            else:
                bot.send_message(call.message.chat.id, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
                  
            #--------------TEMPERATURE-----------------------------
            # need to add temp measuring in real time

        if call.data == "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            backMenu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
            markup.add(backMenu)
            bot.send_message(call.message.chat.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ãüìà")
            bot.send_message(call.message.chat.id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:")
            bot.send_message(call.message.chat.id, tempValues, reply_markup = markup)
        
        if call.data == "–î–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è":
            if anyBodyThere == '1':
                anyBodyThereStatus = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∫—Ç–æ-—Ç–æ –µ—Å—Ç—å"
            else:
                anyBodyThereStatus = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–∏–∫–æ–≥–æ"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            backMenu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
            markup.add(backMenu)
            bot.send_message(call.message.chat.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–∞—Ç—á–∏–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
            bot.send_message(call.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:")
            bot.send_message(call.message.chat.id, anyBodyThereStatus, reply_markup = markup)

        if call.data == "–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å":

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            backMenu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
            markup.add(backMenu)
            bot.send_message(call.message.chat.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–∞—Ç—á–∏–∫ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏")
            bot.send_message(call.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Ç—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏:") # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            bot.send_message(call.message.chat.id, lightMeasure, reply_markup = markup)
        
        if call.data == "–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏":

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            backMenu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
            markup.add(backMenu)
            bot.send_message(call.message.chat.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞")
            bot.send_message(call.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:") # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            bot.send_message(call.message.chat.id, humidityValues, reply_markup = markup)


        #-------------MAIN MENU--------------------------------

    except Exception as e:
         print(repr(e))

def decoding_protocol():
    # –ü–ï–†–í–û–ï - –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê –í–¢–û–†–û–ï - –í–õ–ê–ñ–ù–û–°–¢–¨ –¢–†–ï–¢–¨–ï - –°–í–ï–¢–û–î–ò–û–î–ù–ê–Ø –õ–ï–ù–¢–ê –ß–ï–¢–í–ï–†–¢–û–ï - –û–°–í–ï–©–ï–ù–ù–û–°–¢–¨ –ü–Ø–¢–û–ï - –î–ê–¢–ß–ò–ö –ü–†–ò–°–£–¢–°–¢–í–ò–Ø
    global led_value
    global tempValues
    global humidityValues
    global lightMeasure
    global anyBodyThere
    
    i = 0
    while rawData[i] != '/':
        tempValues = tempValues + rawData[i]
        i = i + 1

    i = i + 1
    while rawData[i] != '/':
        humidityValues = humidityValues + rawData[i]
        i = i + 1
    i = i + 1
    while rawData[i] != '/':
        led_value = led_value + rawData[i]
        i = i + 1
    i = i + 1
    while rawData[i] != '/':
        lightMeasure = lightMeasure + rawData[i]
        i = i + 1
    for n in range(len(rawData) - (i + 1)):
        f = n + 1
        anyBodyThere = anyBodyThere + rawData[i + f]
          
bot.polling(none_stop=True, interval=0)