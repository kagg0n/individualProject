#---------LIBARARIES---------------

import telebot
from telebot import types
import socket

#--------SOCKET SETTINGS------------
bot = telebot.TeleBot('6570224062:AAG43G3pLc3DnB3BFFbQC9_jCvKpywZ3BAs')

#DEVICE PARAMETRS (back part of the project that will use micropython to communicate with sensors, lamps and etc)

#---LED---
led_value = '' # on/off

#---TEMPERATURE MEASURING---
tempValues = ''
humidityValues = ''

#---LIGHT MEASURING----
lightMeasure = 100

@bot.message_handler(commands=['start'])

def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    led_button = types.KeyboardButton( text="LED –ª–µ–Ω—Ç–∞")
    tempMeasure = types.KeyboardButton(text = '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    lightMeasure = types.KeyboardButton(text = '–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å')
    updateData = types.KeyboardButton(text = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


    markup.row(led_button,tempMeasure)
    markup.add(lightMeasure)
    markup.add(updateData)
    bot.send_message(message.from_user.id, "üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –¥–æ–º–æ–º")
    bot.send_message(message.from_user.id, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤–Ω–∏–∑—É‚¨áÔ∏è")
    bot.send_message(message.from_user.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞:")
    bot.send_message(message.from_user.id, "–£–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n üî∏–£–ø—Ä–∞–≤–ª—è–µ–º–∞—è LED –ª–µ–Ω—Ç–∞ \n üî∏–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã \n üî∏–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ \n üî∏–î–∞—Ç—á–∏–∫ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏",reply_markup = markup)

def main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    led_button1 = types.KeyboardButton(text='LED –ª–µ–Ω—Ç–∞')
    tempMeasure1 = types.KeyboardButton(text = '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    lightMeasure1 = types.KeyboardButton(text = '–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å')
    updateData1 = types.KeyboardButton(text = "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    markup.row(led_button1,tempMeasure1)
    markup.add(lightMeasure1)
    markup.add(updateData1)
    bot.send_message(message.from_user.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞:")
    bot.send_message(message.from_user.id, "–£–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n üî∏–£–ø—Ä–∞–≤–ª—è–µ–º–∞—è LED –ª–µ–Ω—Ç–∞ \n üî∏–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã \n üî∏–î–∞—Ç—á–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ \n üî∏–î–∞—Ç—á–∏–∫ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏",reply_markup = markup)
@bot.message_handler(content_types=['text'])


def get_text_message(message):
    #-----------------LED SETTINGS-----------------------

    global status
    global rawData
    global tempValues
    global led_value
    if message.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        sock = 0
        try:
            led_value = ''
            tempValues = ''
            humidityValues = ''
            sock = socket.socket()
            sock.connect(('192.168.0.104', 3030))
            key = sock.send('1'.encode('utf-8'))
            data = sock.recv(1024) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–∫–µ—Ç–∞.
            rawData = data.decode('utf-8')
            sock.close()
            decoding_protocol()
            bot.send_message(message.from_user.id, "–û–±–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–º–Ω–æ–≥–æ –¥–æ–º–∞")
            main_menu(message)
        except:
            bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–∞–±—É —É–º–Ω–æ–≥–æ –¥–æ–º–∞")
            sock.close()
            main_menu(message)
    if message.text == "LED –ª–µ–Ω—Ç–∞":
        if led_value == '1':
            status = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æüîÜ"
        else:
            status = "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æüí§"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        setOn = types.KeyboardButton('–í–∫–ª—é—á–∏—Ç—å')
        setOff = types.KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å')
        backMenu1 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
        markup.row(setOn, setOff)
        markup.add(backMenu1)
        bot.send_message(message.from_user.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: LED –ª–µ–Ω—Ç–∞")
        bot.send_message(message.from_user.id, status, reply_markup = markup)

    #--------------TEMPERATURE-----------------------------
    # need to add temp measuring in real time

    if message.text == "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        backMenu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ')
        markup.add(backMenu)
        bot.send_message(message.from_user.id, "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ãüìà")
        bot.send_message(message.from_user.id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:")
        bot.send_message(message.from_user.id, tempValues, reply_markup = markup)
        
    #-------------MAIN MENU--------------------------------

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüíæ":
        main_menu(message)

def decoding_protocol():
	global led_value
	global tempValues
	global humidityValues
    
	i = 0
	while rawData[i] != '/':
		tempValues = tempValues + rawData[i]
		i = i + 1
	i = i + 1
	while rawData[i] != '/':
		humidityValues = humidityValues + rawData[i]
		i = i + 1
	for n in range(len(rawData) - (i + 1)):
		f = n + 1
		led_value = led_value + rawData[i + f]
bot.polling(none_stop=True, interval=0)